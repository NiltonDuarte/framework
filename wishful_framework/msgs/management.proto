package wishful_controller.framework;

message CmdDesc {
    required string type = 1;
    required string func_name = 2;
    optional string exec_time = 3;
    optional string call_id = 4;
    optional string caller_id = 5;
    optional string transaction_id = 6;

    enum Serialization {
      NONE = 0;
      PICKLE = 1;
      PROTOBUF = 2;
    }
    optional Serialization serialization_type = 7 [default = NONE];

    optional string repeat_interval = 8;
    optional uint32 repeat_number = 9;

    message RepeatConditions {
      optional uint32 condition = 1;
      optional uint32 value = 2;  
    }
    optional RepeatConditions repeat_conditions = 10;
}

message RuleDesc {
    message Match {
        required string type = 1;
        required string func_name = 2;
        required string filter_type = 3;
        required string filter_window_type = 4;
        required string filter_window_size = 5;
        required string condition = 6;
        required string value = 7;
    }
    required Match match = 1;

    message Action {
        required string type = 1;
        required string func_name = 2;
        required string args = 3;
    }
    required Action action = 2;

    enum Permanence {
      TRANSIENT = 0;
      PERMANENT = 1;
    }
    required Permanence permanence = 3 [default = TRANSIENT];
    required string callback = 4;
}

message MsgDesc {
    required string msg_type = 1;
    optional string exec_time = 2;
    optional string transaction_id = 3;
    optional string uuid = 4;
    optional bool msg_set = 5; // Setter/Getter
}

message NewNodeMsg {
    required string agent_uuid = 1;
    optional string name = 2;
    optional string info = 3;
    repeated string modules = 4;

    message Attribute {
        required string name = 1;
        required string value = 2;
    }

    repeated Attribute attributes = 5;
}


message NewNodeAck {
    required bool status = 1;
    optional string controller_uuid = 2;
    optional string agent_uuid = 3;
    repeated string topics = 4;
}


message NodeExitMsg {
    required string agent_uuid = 1;
    optional string reason = 2;
}


message ControllerDiscoveredMsg {
    optional string down_link = 1;
    optional string up_link = 2;
    optional string pair = 3;
}

message DiscoverySuccessMsg {
    required bool status = 1;
}

message DiscoveryRestartMsg {
    optional string reason = 1;
}

message HelloMsg {
    required string uuid = 1;
    required uint32 timeout = 2;
}


message ExampleModuleReq {
    optional string hello = 1;
}


message ExampleModuleAck {
    required string hello = 1;
}